[OPTIONS]
in=1.0
pos=91.0
::FSLUSER=aplsimple
::FSLBRANCH=tip
::FSLBRANCHCOLOR=#004000
::EMENUTMPFILE=%mn.tmp~
::EM_T_FILE=-g *,src/*,menus/*,lib/*
::EM_T_TIME=none
::EM_T_DRY=1
::EM_T_VERBOSE=1
::EMENUBRIEF=0
::EMENUGREP=
%C if {![info exist ::EMENUCOMMIT]} {set ::EMENUCOMMIT ""}
%C if {![info exist ::EMENUCOMMIT1]} {set ::EMENUCOMMIT1 tip}
%C if {![info exist ::EMENUCOMMIT2]} {set ::EMENUCOMMIT2 ""}

[MENU]
 S:fossil pull S: cd %PD
 R:fossil pull R: %C set ::FSLREPO "%PN"
 R:fossil pull R: %C if {![info exist ::FSLPASS]} {set ::FSLPASS ""}
 R:fossil pull R: \
  %I "" "FOSSIL PULL" { \
  v_0  {{} {-pady 7} {}} {} \
  ent0 {{User name : } {} {}} {"$::FSLUSER"} \
  ent1 {{Password  : } {} {-show *}} {"$::FSLPASS"} \
  v_1  {{} {-pady 7} {}} {} \
  ent2 {{Repository: } {} {-w 40}} {"$::FSLREPO"} \
  v_2  {{} {-pady 7} {}} {} seh {{} {} {}} {} \
  texc {{For example:} {} {-h 5 -w 52 -ro 1}} \
  {If\n  User name : Bill\n  Repository: MS\nthe changes would be pulled from \
  \n  https://chiselapp.com/user/Bill/repository/MS} \
  } -head "\nPULL changes from https://chiselapp.com\nto %PD" -weight bold \
  == ::FSLUSER ::FSLPASS ::FSLREPO
 SW:fossil pull SW: fossil pull \
   https://$::FSLUSER:$::FSLPASS@chiselapp.com/user/$::FSLUSER/repository/$::FSLREPO

 S:fossil push S: cd %PD
 R:fossil push R: %C set ::FSLREPO "%PN"
 R:fossil push R: %C if {![info exist ::FSLPASS]} {set ::FSLPASS ""}
 R:fossil push R: \
  %I "" "FOSSIL PUSH" { \
  v_0  {{} {-pady 7} {}} {} \
  ent0 {{User name : } {} {}} {"$::FSLUSER"} \
  ent1 {{Password  : } {} {-show *}} {"$::FSLPASS"} \
  v_1  {{} {-pady 7} {}} {} \
  ent2 {{Repository: } {} {-w 40}} {"$::FSLREPO"} \
  v_2  {{} {-pady 7} {}} {} seh {{} {} {}} {} \
  texc {{For example:} {} {-h 5 -w 52 -ro 1}} \
  {If\n  User name : Bill\n  Repository: MS\nthe changes would be pushed to \
  \n  https://chiselapp.com/user/Bill/repository/MS} \
  } -head "\nPUSH changes from %PD\nto https://chiselapp.com" -weight bold \
  == ::FSLUSER ::FSLPASS ::FSLREPO
 SW:fossil push SW: fossil push \
   https://$::FSLUSER:$::FSLPASS@chiselapp.com/user/$::FSLUSER/repository/$::FSLREPO

 R:  R: 2

 S:fossil uv sync S: cd %PD/.BIN
 R:fossil uv sync R: %C if [file exist 4uvadd] {set ::FORUV { .BIN/4uvadd}} {set ::FORUV {}}
 R:fossil uv sync R: %q "UNVERSIONED FILES" " DO\n\n    fossil uv add * \
   \n    fossil uv sync\n\n for ALL$::FORUV files of\n\n    %PD/.BIN?"
SW:fossil uv sync SW: if test -f ./4uvadd ; then ./4uvadd ; else fossil uv add * ; fi \
  \nfossil uv ls\necho ---------------------------\necho Press Return to run UV SYNC \
  \nread\nfossil uv sync

 S:fossil uv sync %F S: cd %PD/.BIN
 R:fossil uv sync %F R: %q "UNVERSIONED FILE" " DO\n\n    fossil uv add %F \
   \n    fossil uv sync\n\n ( for .BIN/%F ) ?"
SW:fossil uv sync %F SW: fossil uv add %F\nfossil uv sync

 S:fossil config pull shun S: cd %PD
 R:fossil config pull shun R: %C if {![info exist ::FSLREPO]}  {set ::FSLREPO %PN; set ::FSLPASS ""}
 R:fossil config pull shun R: \
  %I "" "PULL SHUNS" { \
  v_0  {{} {-pady 7} {}} {} \
  ent0 {{User name : } {} {}} {"$::FSLUSER"} \
  ent1 {{Password  : } {} {-show *}} {"$::FSLPASS"} \
  v_1  {{} {-pady 7} {}} {} \
  ent2 {{Repository: } {} {-w 40}} {"$::FSLREPO"} \
  v_2  {{} {-pady 7} {}} {} seh {{} {} {}} {} \
  texc {{For example:} {} {-h 5 -w 52 -ro 1}} \
  {If\n  User name : Bill\n  Repository: MS\nthe shunning list would be pulled from \
  \n  https://chiselapp.com/user/Bill/repository/MS} \
  } -head "\nPULL shuns from https://chiselapp.com\nto %PD" -weight bold \
  == ::FSLUSER ::FSLPASS ::FSLREPO
 SW:fossil config pull shun SW: fossil configuration pull shun \
   https://$::FSLUSER:$::FSLPASS@chiselapp.com/user/$::FSLUSER/repository/$::FSLREPO

 R:  R: 2

 S:fossil checkout ? S: cd %PD
RW:fossil checkout ? RW: fossil tim -t ci -n 9999 > $::EMENUTMPFILE
 R:fossil checkout ? R: %I {} "CHECKOUT" { \
   fco1 {{Version / branch / tag :} {} {-h 10 -state readonly -cbxsel "$::FSLBRANCH"}} \
     {@@-div1 "\[" -div2 "\]" -ret 1 -list {"" tip} $::EMENUTMPFILE@@ \
     INFO: @@-div1 "\] " $::EMENUTMPFILE@@} \
   v_ {{} {-pady 7} {}} {} seh {{} {} {}} {} \
   texc {{Hint:} {} {-h 7 -w 70 -ro 1 -wrap word}} \
   { The VERSION can be the name of a branch or tag or any abbreviation to the 40-character artifact ID for a check-in. \
\n The VERSION can be a date/time stamp (e.g. YYYY-MM-DD, HH:MM:SS, 'YYYY-MM-DD HH:MM:SS'). \
\n CHECKOUT does not merge local changes, it prefers to overwrite them and fails if local changes exist.} \
   } -head {\n This will CHECKOUT a version / branch / tag. \n} -weight bold == ::FSLBRANCH
 S:fossil checkout ? S: fossil co --setmtime "$::FSLBRANCH"

 S:fossil merge ? S: cd %PD
RW:fossil merge ? RW: fossil tim -t ci -n 99 > $::EMENUTMPFILE
 R:fossil merge ? R: %I warn "MERGE" { \
   fco1 {{Version / branch / tag :} {} {-h 10 -w 45 -state readonly -cbxsel "$::FSLBRANCH"}} \
     {@@-div1 "\[" -div2 "\]" -ret 1 -list {"" tip} $::EMENUTMPFILE@@ \
     INFO: @@-div1 "\] " $::EMENUTMPFILE@@} \
   v_} -head {\n This will MERGE changes from a branch, \
   \n then commits (you may cancel the commit afterwards). \n} -weight bold == ::FSLBRANCH
 S:fossil merge ? S: fossil merge "$::FSLBRANCH"\nfossil commit

 S:fossil update ? S: cd %PD
 R:fossil update ? R: %C  if {![info exist ::FSLUPD]}  {set ::FSLUPD ""}
RW:fossil update ? RW: fossil tim -t ci -n 99 > $::EMENUTMPFILE
 R:fossil update ? R: %I {} "UPDATE" { \
   fco1 {{Version / branch / tag :} {} {-h 10 -state readonly -cbxsel "$::FSLUPD"}} \
     {@@-div1 "\[" -div2 "\]" -ret 1 -list {"" tip} $::EMENUTMPFILE@@ \
     INFO: @@-div1 "\] " $::EMENUTMPFILE@@} \
   v_ {{} {-pady 7} {}} {} seh {{} {} {}} {} \
   texc {{Hint:} {} {-h 7 -w 70 -ro 1 -wrap word}} \
   { VERSION can be 'trunk' to move to the trunk branch. \
\n If you omit the VERSION, fossil moves you to the latest version of the branch your are currently on. \
\n VERSION can be 'tip' to select the most recent check-in. \
\n Any uncommitted changes are retained and applied to the new checkout.} \
  } -head {\n This will UPDATE to a version / branch / tag. \n} -weight bold == ::FSLUPD
 S:fossil update ? S: fossil update "$::FSLUPD"

 S:fossil revert S: cd %PD
 R:fossil revert R: %q "REVERT ALL" \
   "Revert ALL changes?\n\nThis restores a last check-in in\n  %PD" yesno warn NO
 S:fossil revert S: fossil revert

 R:fossil undo R: cd %PD
SW:fossil undo SW: fossil undo -n
 R:fossil undo R: %q "UNDO ALL" "Undo ALL changes? \
   \n\n(This cancels result of prior operations, notably \
   \nof 'update', 'merge', stash', 'revert'.)" yesno warn NO
 S:fossil undo S: fossil undo

 R:  R: 2

 S:2DOC S: cd %PD/.BIN
 R:2DOC R: %q "COMMIT DOC SOURCES" \
   "This will commit DOC sources in:  \
   \n\n   %PD\n\nSee details at: \
   \n\n   https://chiselapp.com/user/aplsimple/repository/HOWTO_chisel" yesno warn NO
 S:2DOC S: ./4files\n./2DOC

 S:2trunk S: cd %PD/.BIN
 R:2trunk R: %q "COMMIT DOC GENERATED" \
   "This will commit GENERATED docs in:  \
   \n\n   %PD\n\nSee details at: \
   \n\n   https://chiselapp.com/user/aplsimple/repository/HOWTO_chisel" yesno warn NO
 S:2trunk S: ./2trunk

 R:  R: 2

 S:fossil init ~/FOSSIL/%PN.fossil S: cd %PD
 R:fossil init ~/FOSSIL/%PN.fossil R: %q "FOSSIL INIT" "Initialize the fossil repository \
   \n   ~/FOSSIL/%PN.fossil\nin\n   %PD?"
 S:fossil init ~/FOSSIL/%PN.fossil S: mkdir ~/FOSSIL\necho ------------\nfossil init ~/FOSSIL/%PN.fossil\nfossil open ~/FOSSIL/%PN.fossil\nfossil status

 S:fossil settings S: cd %PD
 S:fossil settings S: fossil settings

 S:set standard settings of fossil (ignore etc.) S: cd %PD
 R:set standard settings of fossil (ignore etc.) R:  %q "Settings" " Set in \
  \n    %PD\n the standard settings of fossil? \
  \n __________________________________ \
  \n NOTE: Consider the installation of\n    meld\n    colordiff\n    nano" yesno warn NO
 S:set standard settings of fossil (ignore etc.) S: fossil settings diff-command 'colordiff -wu'; fossil settings ignore-glob ".*,*~,*.swp,*.tmp,*.bak,*.log,*.backup,*.*~0" ; fossil settings crnl-glob '*' ; fossil settings encoding-glob '*' ; fossil settings autosync 0 ; fossil settings gdiff meld ; fossil settings editor nano ; fossil settings binary-glob 1 ; if test -f .BIN/4init ; then .BIN/4init ; fi ; fossil settings

 S:fossil all list S: cd %PD
 S:fossil all list S: fossil all list

R:  R: 2
 S:fossil status %PD S: cd %PD
 S:fossil status %PD S: echo %PD\ndir\necho ---\nfossil status

 S:fossil addremove ? S: cd %PD
 R:fossil addremove ? R: %I {} "ADDREMOVE" { \
   chb1 {{   Dry run:}} {$::EM_T_DRY} \
   v_2 {{} {-pady 4}} {} seh {} {} \
   texc {{Hint:} {} {-h 11 -w 73 -ro 1 -wrap word}} \
   {\n *  All files in the checkout but not in the repository (that is,\
\n    all files displayed using the 'extras' command) are added as\
\n    if by the 'add' command.\
\n\n *  All files in the repository but missing from the checkout (that is,\
\n    all files that show as MISSING with the 'status' command) are\
\n    removed as if by the 'rm' command.\
\n\n The 'Dry run' shows the supposed changes, not doing actually.} \
   } -head {\n This will ADD the new and REMOVE the deleted\n file(s) of Fossil repository. \n} -weight bold == ::EM_T_DRY
 S:fossil addremove ? S: %C if $::EM_T_DRY {set ::EM_T_n -n} {set ::EM_T_n ""}
 S:fossil addremove ? S: fossil addremove $::EM_T_n

 S:fossil touch ? S: cd %PD
 R:fossil touch ? R: %I {} "TOUCH" { \
   fil1 {{   File(s):}} {"$::EM_T_FILE"} \
   opc1 {{Time stamp:}} {{$::EM_T_TIME} {--now --checkin --checkout}} \
   v_ {{} {-pady 4}} {} \
   chb1 {{   Dry run:}} {$::EM_T_DRY} \
   chb2 {{   Verbose:}} {$::EM_T_VERBOSE} \
   v_2 {{} {-pady 4}} {} seh {} {} \
   texc {{Hint:} {} {-h 10 -w 64 -ro 1 -wrap word}} \
   {\n The file(s) mtime will be updated to the 'Time stamp'. \
\n\n The 'File(s)' may be globs. Set '-g' before a comma-separated \
\n list of glob patterns, for example: -g *,src/*,menus/*. \
\n\n The 'Dry run' shows the supposed changes, not doing actually. \
\n\n The 'Verbose' outputs extra information.} \
   } -head {\n This will TOUCH the file(s) of Fossil repository\n to have the file(s) time equal to the time stamp. \n} -weight bold == ::EM_T_FILE ::EM_T_TIME ::EM_T_DRY ::EM_T_VERBOSE
 S:fossil touch ? S: %C if $::EM_T_DRY {set ::EM_T_n -n} {set ::EM_T_n ""}
 S:fossil touch ? S: %C if $::EM_T_VERBOSE {set ::EM_T_v -v} {set ::EM_T_v ""}
 S:fossil touch ? S: fossil touch $::EM_T_n $::EM_T_v $::EM_T_TIME $::EM_T_FILE

 R:terminal here R: cd %d
 R:terminal here R: %TT